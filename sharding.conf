// config server setup

// csrs1.conf is the config server for the first node.
sharding:
  clusterRole: configsvr
systemLog:
  destination: file
  path: /opt/homebrew/var/log/mongo/csrs1/mongo.log
  logAppend: true
storage:
  dbPath: /opt/homebrew/var/mongo/csrs1
  journal:
     enabled: true
net:
  bindIp: 127.0.0.1, ::1
  ipv6: true
  port: 26001
security:
  authorization: enabled
  keyFile: /opt/homebrew/var/mongodb/pki/m103-keyfile
processManagement:
  fork: true
replication:
  replSetName: m103-csrs

mongo -f csrs1.conf

// csrs2.conf is the config server for the second node.

sharding:
  clusterRole: configsvr
systemLog:
  destination: file
  path: /opt/homebrew/var/log/mongo/csrs2/mongo.log
  logAppend: true
storage:
  dbPath: /opt/homebrew/var/mongo/csrs2
  journal:
     enabled: true
net:
  bindIp: 127.0.0.1, ::1
  ipv6: true
  port: 26002
security:
  authorization: enabled
  keyFile: /opt/homebrew/var/mongodb/pki/m103-keyfile
processManagement:
  fork: true
replication:
  replSetName: m103-csrs

mongo -f csrs2.conf
// csrs3.conf is the config server for the third node.

sharding:
  clusterRole: configsvr
systemLog:
  destination: file
  path: /opt/homebrew/var/log/mongo/csrs3/mongo.log
  logAppend: true
storage:
  dbPath: /opt/homebrew/var/mongo/csrs3
  journal:
     enabled: true
net:
  bindIp: 127.0.0.1, ::1
  ipv6: true
  port: 26003
security:
  authorization: enabled
  keyFile: /opt/homebrew/var/mongodb/pki/m103-keyfile
processManagement:
  fork: true
replication:
  replSetName: m103-csrs

mongo -f csrs3.conf
mongo --port 26001
rs.initiate()
db.createUser({
    user: "m103-admin",
    pwd: "m103-pass",
    roles: [
        { role:"root", db:"admin" }
    ]
})
db.auth("m103-admin", "m103-pass")
rs.add("localhost:26002")
rs.add("localhost:26003")
rs.status()

// mongos.conf configuration

sharding:
  configDB: m103-csrs/localhost:26001,localhost:26002,localhost:26003
security:
  keyFile: /opt/homebrew/var/mongodb/pki/m103-keyfile
net:
  bindIp: localhost, ::1
  port: 26000
systemLog:
  destination: file
  path: /opt/homebrew/var/log/mongo/mongos.log
  logAppend: true
processManagement:
  fork: true


mongos -f mongos.conf
mongo --port 26000 -u "m103-admin" -p "m103-pass" --authenticationDatabase "admin"

sh.status()

//shard1.conf configuration

sharding:
  clusterRole: shardsvr
storage:
  dbPath: /opt/homebrew/var/mongo/node1
  wiredTiger:
    engineConfig:
      cacheSizeGB: .1
net:
  bindIp: 192.168.103.100,localhost
  port: 27011
security:
  keyFile: /var/mongodb/pki/m103-keyfile
systemLog:
  destination: file
  path: /opt/homebrew/var/log/mongo/node1/mongo.log
  logAppend: true
processManagement:
  fork: true
replication:
  replSetName: m103-repl

sharding:
  clusterRole: shardsvr
storage:
  dbPath: /opt/homebrew/var/mongo/node2
  wiredTiger:
    engineConfig:
      cacheSizeGB: .1
net:
  bindIp: 192.168.103.100,localhost
  port: 27012
security:
  keyFile: /var/mongodb/pki/m103-keyfile
systemLog:
  destination: file
  path: /opt/homebrew/var/log/mongo/node2/mongo.log
  logAppend: true
processManagement:
  fork: true
replication:
  replSetName: m103-repl

sharding:
  clusterRole: shardsvr
storage:
  dbPath: /opt/homebrew/var/mongo/node3
  wiredTiger:
    engineConfig:
      cacheSizeGB: .1
net:
  bindIp: 192.168.103.100,localhost
  port: 27012
security:
  keyFile: /var/mongodb/pki/m103-keyfile
systemLog:
  destination: file
  path: /opt/homebrew/var/log/mongo/node3/mongo.log
  logAppend: true
processManagement:
  fork: true
replication:
  replSetName: m103-repl


db.createUser({
    user: "m103-admin",
    pwd: "m103-pass",
    roles: [
        { role:"root", db:"admin" }
    ]
})
db.auth("m103-admin", "m103-pass")
rs.initiate()
rs.add("localhost:26002")
rs.add("localhost:26003")
//mongo --port 27012 -u "m103-admin" -p "m103-pass" --authenticationDatabase "admin"

now connect to the mongos and run the following command to add the shards to the cluster.
sh.addShard("m103-repl/192.168.103.100:27011")







